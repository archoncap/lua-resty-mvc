error_log  logs/error.log;
pid logs/nginx.pid;

events {worker_connections  1024;}

http {
    lua_code_cache off;
    default_type  "text/html; charset=utf-8";

    server {
        listen       8080;
        server_name  localhost;

        location = /init {
            content_by_lua_block{
                -- create table in the database
                local query = require"resty.mvc.query".single
                local res, err = query("drop table if exists user")
                if not res then
                    return ngx.print('Fail to drop table `user`, '..err)
                end
                res, err = query(
[[CREATE TABLE `user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `update_time` datetime NOT NULL,
  `create_time` datetime NOT NULL,
  `username` varchar(20) NOT NULL,
  `password` varchar(28) NOT NULL,
  `passed` tinyint(4) NOT NULL,
  `class` varchar(5) NOT NULL,
  `age` int(11) NOT NULL,
  `score` float NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `id` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;]])
                if not res then
                    return ngx.print('Fail to create a table `user`, '..err)
                end
                return ngx.print(
                    'Congratulations! You have created a table `user`, '
                    ..' now please try <a href="/register">register</a>.')
            }
        }

        location = /register {
            content_by_lua_block{
                local UserForm = require"forms".UserForm
                local User = require"models".User
                local req = ngx.req
                local form;

                if req.get_method()=='POST' then
                    req.read_body()
                    form = UserForm:instance{data=req.get_post_args()}
                    if form:is_valid() then
                        local cd=form.cleaned_data
                        local user, errors = User:instance(cd, true)
                        if not user then
                            return ngx.print('Fail to create user, '..table.concat(errors, '<br/>'))
                        else
                            return ngx.print(string.format(
                                'Congratulations! You have created a user successfully!'
                                ..'Name:%s, Password:%s, id:%s, now please try <a href="/login">login</a>', 
                                user.username, user.password, user.id))
                        end
                    end
                else
                    form = UserForm:instance{}
                end
                local form_template=[[
<!DOCTYPE html>
<head>
  <title>lua-resty-mvc</title> 
</head>
<form method="post">
  %s
  <button type="submit">register</button>
</form>
</body>
</html>]]
                return ngx.print(string.format(form_template, form:render()))
            }
        }

        location = /login {
            content_by_lua_block{
                local LoginForm = require"forms".LoginForm
                local User = require"models".User
                local req = ngx.req
                local form;

                if req.get_method()=='POST' then
                    req.read_body()
                    form = LoginForm:instance{data=req.get_post_args()}
                    if form:is_valid() then
                        return ngx.print(
                            'Congratulations! You have passed login test, '
                            ..' your first experience to `lua-resty-mvc` is over. Hope you will enjoy it!')
                    end
                else
                    form = LoginForm:instance{}
                end
                local form_template=[[
<!DOCTYPE html>
<head>
  <title>lua-resty-mvc</title> 
</head>
<form method="post">
  %s
  <button type="submit">login</button>
</form>
</body>
</html>]]
                return ngx.print(string.format(form_template, form:render()))
            }
        }

        location = /test {
            content_by_lua_block{
                local test_funcs = require"test"
                ngx.header['Content-Type'] = "text/plain; charset=utf-8"
                local errors = {}
                for i, callback in ipairs(test_funcs) do
                    local err  = callback()
                    if err then
                        errors[#errors+1] = {i, err}
                    end
                end
                if next(errors) then
                    for i, v in ipairs(errors) do
                        ngx.say(string.format('%sth test function failed: %s', v[1], v[2]))
                    end
                else
                    ngx.print('All tests are passed!!')
                end
            }
        }
    }

}
